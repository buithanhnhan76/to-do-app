{"version":3,"sources":["reportWebVitals.js","Components/Clock.jsx","images/tasks.jpg","Components/TaskDetails.jsx","Components/Tasks.jsx","Components/Button.jsx","Components/common/ListGroup.jsx","App.js","utils/paginate.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Clock","props","state","date","Date","setInterval","tick","this","setState","toLocaleTimeString","Component","TaskDetails","id","match","params","taskscontext","useContext","TasksContext","task","tasks","filter","parseInt","className","Fragment","title","completed","onClick","onUpdate","onDelete","history","push","Tasks","willPower","paginateTasks","pageCount","onPageChange","currentPage","map","to","forcePage","marginPagesDisplayed","containerClassName","pageClassName","nextClassName","previousClassName","breakClassName","activeClassName","pageLinkClassName","nextLinkClassName","previousLinkClassName","breakLinkClassName","activeLinkClassName","path","render","src","tasksPhoto","Button","ListGroup","setActiveClass","item","selectedItem","textProperty","items","valueProperty","onItemSelect","defaultProps","React","createContext","App","states","_id","name","pageSize","handleUpdate","a","index","indexOf","axios","put","handleDelete","stateTask","delete","handleItemSelect","handlePageChange","data","selectedPage","selected","get","apiTasks","selectedTasks","pageNumber","startIndex","_","slice","take","value","paginate","Math","ceil","length","Provider","handleClick","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.f110b09d.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React, { Component } from 'react';\r\n\r\n\r\n\r\nclass Clock extends Component{\r\n    constructor(props){\r\n      super(props);\r\n      // initial date with Date type js (Wed Jul 21 2021 16:34:45 GMT+0700 (Indochina Time))\r\n      this.state = {date: new Date()};\r\n    };\r\n  \r\n    componentDidMount(){\r\n      // call tick every 1000 miliseconds\r\n      setInterval(() => this.tick(),1000);\r\n    };\r\n\r\n    // set date with a new date\r\n    tick(){\r\n      this.setState({date: new Date()});\r\n    };\r\n  \r\n    render(){\r\n      return (\r\n        <div>\r\n          <h1>Hello Guy</h1>\r\n          {/* toLocaleTimeString returns time like 04:03:01 pm */}\r\n          <h2>It is {this.state.date.toLocaleTimeString()}. </h2>\r\n        </div>\r\n      )\r\n    };\r\n  };\r\n\r\nexport default Clock;","export default __webpack_public_path__ + \"static/media/tasks.f287a546.jpg\";","import React from 'react';\r\n// useContext\r\nimport { useContext } from 'react';\r\n// context from app\r\nimport { TasksContext } from '../App';\r\n\r\nconst TaskDetails = (props) => {\r\n    // id is the id of task\r\n    const id = props.match.params.id;\r\n    // context\r\n    const taskscontext = useContext(TasksContext);\r\n    // task is an array\r\n    const task = taskscontext.tasks.filter(task => task.id === parseInt(id));\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            {task[0]?\r\n            <React.Fragment>\r\n            <p>ID: {task[0].id}</p>\r\n            <p>TITLE: {task[0].title}</p>\r\n            {/* if complteted is true || */}\r\n            <p>COMPLETE: {(task[0].completed)?<span className=\"badge badge-success\">Complete</span>:<span className=\"badge badge-danger\">Not Yet</span> }</p>\r\n            <button className=\"btn btn-warning d-block\" onClick={() => taskscontext.onUpdate(task[0])}>Update</button>\r\n            {/* my to create space between buttons */}\r\n            {/* when click on delete, close taskdetails and delete task   */}\r\n            <button className=\"btn btn-danger d-block my-3\" onClick={() => {taskscontext.onDelete(task[0])}}>Delete</button>\r\n            {/* some bottom margin */}\r\n            </React.Fragment>\r\n            :\r\n            <span className=\"badge badge-warning mb-3\">Delete Successful</span>\r\n            }\r\n            {/* push(\"/\"\") => just close the taskdetails, cause I not use router on other component  */}\r\n            <button className=\"btn btn-success mb-3 d-block\" onClick={() => props.history.push(\"/\")}>Close</button>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default TaskDetails;","import React, { Component } from 'react';\r\n// pagination\r\nimport ReactPaginate from 'react-paginate';\r\n// import tasks photo\r\nimport tasksPhoto from '../images/tasks.jpg';\r\nimport {Link} from 'react-router-dom';\r\n// router\r\nimport {Route} from 'react-router-dom';\r\nimport TaskDetails from './TaskDetails';\r\n \r\nclass Tasks extends Component {\r\n    render() { \r\n        const {willPower,paginateTasks, pageCount, onPageChange, currentPage} = this.props;\r\n        return ( \r\n            (willPower)?    \r\n            <div>\r\n                <h1>Your tasks !</h1>\r\n                    {paginateTasks.map(task => \r\n                    // margin bottom for space with pagination\r\n                    <div key={task.id} className=\"row mb-3\">\r\n                        {/* text truncate to wrap text with ... */}\r\n                        <div className=\"col-8 text-truncate\">\r\n                            {task.title}\r\n                        </div>\r\n                        <div className=\"col-4\">\r\n                            <Link to={`/taskdetails/${task.id}`}><button className=\"btn btn-success\">Details</button></Link> \r\n                        </div>\r\n                        \r\n                    </div>\r\n                    )}\r\n                <ReactPaginate \r\n                pageCount={pageCount}\r\n                onPageChange={onPageChange}\r\n                // forcePage: set selected page by props\r\n                forcePage={currentPage}\r\n                marginPagesDisplayed={2}\r\n                containerClassName=\"pagination\"\r\n                pageClassName=\"page-item\"\r\n                nextClassName=\"page-item\"\r\n                previousClassName=\"page-item\"\r\n                breakClassName=\"page-item\"\r\n                activeClassName=\"page-item active\"\r\n                pageLinkClassName=\"page-link\"\r\n                nextLinkClassName=\"page-link\"\r\n                previousLinkClassName=\"page-link\"\r\n                breakLinkClassName=\"page-link\"\r\n                activeLinkClassName=\"page-link\"\r\n                />\r\n                <Route path=\"/taskdetails/:id\" render={(props) => <TaskDetails {...props}></TaskDetails>}></Route>\r\n            </div>\r\n            :\r\n            <div>\r\n                    {/* if willPower is false, then this h1 is printed */}\r\n                    <h1>Tasks for you !</h1>\r\n                    <img className=\"img img-thumbnail img-deco\" src={tasksPhoto}></img>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Tasks;","import React, { Component } from 'react';\r\n\r\nclass Button extends Component {\r\n    render() {\r\n        // pick willPower from app.js\r\n        const {willPower} = this.props;\r\n        return ( \r\n            // btn class = success when not click and in danger if user want to finish\r\n            <button onClick={this.props.onClick} className={(willPower)?\"btn btn-danger\":\"btn btn-success\"}\r\n            >\r\n            {/* label is Get It when user not click and Finish after user click */}\r\n            { willPower ? \"Finish\" : \"Get it\"}\r\n            </button>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Button;","import React from 'react';\r\n\r\nfunction ListGroup (props) {\r\n    \r\n    // set active class by passing item and selected item\r\n    const setActiveClass = (item, selectedItem) => {\r\n          return (item[textProperty] === selectedItem[textProperty]?\"list-group-item active\":\"list-group-item\" )\r\n     }\r\n    const {items, textProperty, valueProperty, onItemSelect, selectedItem} = props;\r\n    return ( \r\n        <ul className=\"list-group clickable d-inline-block\">\r\n            {items.map(item =>(<li onClick={() => onItemSelect(item)} key={item[valueProperty]}\r\n            className={setActiveClass(item, selectedItem)}>\r\n            {item[textProperty]}</li>)\r\n            )}\r\n        </ul>\r\n        );\r\n}\r\n\r\n// set default for list group\r\nListGroup.defaultProps = {\r\n    textProperty: \"name\",\r\n    valueProperty: \"_id\"\r\n}\r\n\r\nexport default ListGroup;","import './App.css';\r\nimport React, {Component} from 'react';\r\nimport Clock from './Components/Clock';\r\nimport Tasks from './Components/Tasks';\r\nimport Button from './Components/Button';\r\nimport axios from 'axios';\r\nimport ListGroup from './Components/common/ListGroup';\r\n// paginate data\r\nimport { paginate } from './utils/paginate';\r\n\r\nexport const TasksContext = React.createContext();\r\nclass App extends Component {\r\n  state = {\r\n    // your tasks\r\n    tasks: [],\r\n    // willPower: you will do it ?, default is false\r\n    willPower: false,\r\n    // listgroup\r\n    states: [\r\n      {_id: \"\", name: \"All\"},\r\n      {_id:\"1\", name: \"Complete\",completed: true},\r\n      {_id:\"2\", name: \"Not Complete\", completed: false}\r\n    ],\r\n    selectedItem: {_id: \"\", name: \"All\"},\r\n    // tasks\r\n    currentPage: 0,\r\n    pageSize: 5,\r\n  };\r\n  async componentDidMount(){\r\n    // api tasks is the task received from json\r\n    const apiTasks = await axios.get(\"https://jsonplaceholder.typicode.com/todos\");\r\n    this.setState({tasks: apiTasks.data});\r\n  }\r\n  // when click, set willPower != willPower \r\n  handleClick(){\r\n    this.setState({willPower: !this.state.willPower});\r\n  }\r\n  // update task\r\n  handleUpdate = async (task) => {\r\n    const tasks = [...this.state.tasks];\r\n    const index = tasks.indexOf(task);\r\n    tasks[index].completed = !tasks[index].completed;\r\n    this.setState({tasks});\r\n    // update server\r\n    await axios.put(\"https://jsonplaceholder.typicode.com/todos\" + \"/\" + task.id,task);\r\n  }\r\n  // delete task\r\n  handleDelete = async (task) => {\r\n    const tasks = this.state.tasks.filter(stateTask => stateTask.id !== task.id);\r\n    this.setState({tasks});\r\n    await axios.delete(\"https://jsonplaceholder.typicode.com/todos\" + \"/\" + task.id);\r\n  }\r\n  // select item on listgroup handle\r\n  handleItemSelect = (item) => {\r\n    this.setState({selectedItem: item, currentPage: 0});\r\n  }\r\n  // select page on Pagination\r\n  handlePageChange = (data) => {\r\n  // pick selected from data: 1,2,3 \r\n    const selectedPage = data.selected;\r\n    this.setState({currentPage: selectedPage});\r\n}\r\n  render () {\r\n    // pick tasks and willPower from state\r\n    const {tasks,willPower,selectedItem, currentPage, pageSize} = this.state;\r\n    // filter tasks\r\n    const selectedTasks = (selectedItem._id)?tasks.filter(task => task.completed === selectedItem.completed):tasks;\r\n     // paginate data\r\n    const paginateTasks = paginate(selectedTasks,currentPage,pageSize);    \r\n     // pageCount for pagination\r\n    const pageCount = Math.ceil(selectedTasks.length / pageSize);\r\n    return (\r\n    <TasksContext.Provider value={{tasks: tasks, onUpdate: this.handleUpdate,\r\n    onDelete: this.handleDelete}}>\r\n    <div className=\"container mt-5\">\r\n        <Clock />\r\n        <div className=\"row \">\r\n          <div className=\"col-md-5\">\r\n            <Tasks willPower={willPower} paginateTasks={paginateTasks} pageCount={pageCount}\r\n            onPageChange={this.handlePageChange} currentPage={currentPage}/>\r\n          </div>\r\n          {/* mt2 for responsive in small devices */}\r\n          <div className=\"col-md-7 mt-2\">\r\n            <div className=\"container-fluid mb-2\"><Button willPower={willPower}\r\n            onClick={() => this.handleClick()}/></div>\r\n            {/* conditional render for list group */}\r\n            {willPower&&<div className=\"container-fluid\"><ListGroup items={this.state.states}\r\n            selectedItem={this.state.selectedItem} onItemSelect={this.handleItemSelect}></ListGroup></div>}\r\n          </div>\r\n        </div>\r\n    </div>\r\n    </TasksContext.Provider>\r\n    \r\n  );\r\n  }\r\n};\r\n\r\nexport default App;\r\n","import _ from 'lodash';\r\n\r\nexport function paginate(items, pageNumber, pageSize){\r\n    const startIndex = (pageNumber - 1) * pageSize;\r\n    return _(items).slice(startIndex).take(pageSize).value();\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './App';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}