{"version":3,"sources":["reportWebVitals.js","Components/Clock.jsx","images/tasks.jpg","Components/TaskDetails.jsx","Components/Tasks.jsx","utils/paginate.js","Components/Button.jsx","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Clock","props","state","date","Date","setInterval","tick","this","setState","toLocaleTimeString","Component","TaskDetails","id","match","params","task","tasks","filter","parseInt","taskscontext","useContext","TasksContext","className","title","completed","onClick","onUpdate","history","push","onDelete","Tasks","currentPage","pageSize","handlePageChange","data","selectedPage","selected","willPower","paginateTasks","items","pageNumber","startIndex","_","slice","take","value","paginate","pageCount","Math","ceil","length","map","to","onPageChange","marginPagesDisplayed","containerClassName","pageClassName","nextClassName","previousClassName","breakClassName","activeClassName","pageLinkClassName","nextLinkClassName","previousLinkClassName","breakLinkClassName","activeLinkClassName","path","render","src","tasksPhoto","Button","React","createContext","App","handleUpdate","a","index","indexOf","axios","put","handleDelete","stateTask","delete","get","apiTasks","Provider","handleClick","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.104a661c.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React, { Component } from 'react';\r\n\r\n\r\n\r\nclass Clock extends Component{\r\n    constructor(props){\r\n      super(props);\r\n      // initial date with Date type js (Wed Jul 21 2021 16:34:45 GMT+0700 (Indochina Time))\r\n      this.state = {date: new Date()};\r\n    };\r\n  \r\n    componentDidMount(){\r\n      // call tick every 1000 miliseconds\r\n      setInterval(() => this.tick(),1000);\r\n    };\r\n\r\n    // set date with a new date\r\n    tick(){\r\n      this.setState({date: new Date()});\r\n    };\r\n  \r\n    render(){\r\n      return (\r\n        <div>\r\n          <h1>Hello Guy</h1>\r\n          {/* toLocaleTimeString returns time like 04:03:01 pm */}\r\n          <h2>It is {this.state.date.toLocaleTimeString()}. </h2>\r\n        </div>\r\n      )\r\n    };\r\n  };\r\n\r\nexport default Clock;","export default __webpack_public_path__ + \"static/media/tasks.f287a546.jpg\";","import React from 'react';\r\n// useContext\r\nimport { useContext } from 'react';\r\n// context from app\r\nimport { TasksContext } from '../App';\r\n\r\nconst TaskDetails = (props) => {\r\n    // id is the id of task\r\n    const id = props.match.params.id;\r\n    // task is an array\r\n    const task = props.tasks.filter(task => task.id === parseInt(id));\r\n    // context\r\n    const taskscontext = useContext(TasksContext);\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <p>ID: {task[0].id}</p>\r\n            <p>TITLE: {task[0].title}</p>\r\n            {/* if complteted is true || */}\r\n            <p>COMPLETE: {(task[0].completed)?<span className=\"badge badge-success\">Complete</span>:<span className=\"badge badge-danger\">Not Yet</span> }</p>\r\n            <button className=\"btn btn-warning d-block\" onClick={() => taskscontext.onUpdate(task[0])}>Update</button>\r\n            {/* my to create space between buttons */}\r\n            {/* when click on delete, close taskdetails and delete task   */}\r\n            <button className=\"btn btn-danger d-block my-3\" onClick={() => {props.history.push(\"/\");taskscontext.onDelete(task[0])}}>Delete</button>\r\n            {/* some bottom margin */}\r\n            {/* push(\"/\"\") => just close the taskdetails, cause I not use router on other component  */}\r\n            <button className=\"btn btn-success mb-3\" onClick={() => props.history.push(\"/\")}>Close</button>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default TaskDetails;","import React, { Component } from 'react';\r\n// pagination\r\nimport ReactPaginate from 'react-paginate';\r\n// paginate data\r\nimport { paginate } from '../utils/paginate';\r\n// import tasks photo\r\nimport tasksPhoto from '../images/tasks.jpg';\r\nimport {Link} from 'react-router-dom';\r\n// router\r\nimport {Route} from 'react-router-dom';\r\nimport TaskDetails from './TaskDetails';\r\n \r\nclass Tasks extends Component {\r\n    state = {\r\n        // current page && pageSize\r\n        currentPage: 0,\r\n        pageSize: 5,\r\n    }\r\n    handlePageChange = (data) => {\r\n        // pick selected from data: 1,2,3 \r\n        const selectedPage = data.selected;\r\n        this.setState({currentPage: selectedPage});\r\n    }\r\n    render() { \r\n        const {willPower,tasks} = this.props;\r\n        const {pageSize, currentPage} = this.state;\r\n\r\n        // paginate data\r\n        const paginateTasks = paginate(tasks,currentPage,pageSize);\r\n        \r\n        // pageCount for pagination\r\n        const pageCount = Math.ceil(tasks.length / pageSize);\r\n\r\n        return ( \r\n            (willPower)?    \r\n            <div>\r\n                <h1>Your tasks !</h1>\r\n                    {paginateTasks.map(task => \r\n                    // margin bottom for space with pagination\r\n                    <div key={task.id} className=\"row mb-3\">\r\n                        {/* text truncate to wrap text with ... */}\r\n                        <div className=\"col-8 text-truncate\">\r\n                            {task.title}\r\n                        </div>\r\n                        <div className=\"col-4\">\r\n                            <Link to={`/taskdetails/${task.id}`}><button className=\"btn btn-success\">details</button></Link> \r\n                        </div>\r\n                        \r\n                    </div>\r\n                    )}\r\n                <ReactPaginate \r\n                pageCount={pageCount}\r\n                onPageChange={this.handlePageChange}\r\n                marginPagesDisplayed={2}\r\n                containerClassName=\"pagination\"\r\n                pageClassName=\"page-item\"\r\n                nextClassName=\"page-item\"\r\n                previousClassName=\"page-item\"\r\n                breakClassName=\"page-item\"\r\n                activeClassName=\"page-item active\"\r\n                pageLinkClassName=\"page-link\"\r\n                nextLinkClassName=\"page-link\"\r\n                previousLinkClassName=\"page-link\"\r\n                breakLinkClassName=\"page-link\"\r\n                activeLinkClassName=\"page-link\"\r\n                />\r\n                <Route path=\"/taskdetails/:id\" render={(props) => <TaskDetails tasks={tasks}  {...props}></TaskDetails>}></Route>\r\n            </div>\r\n            :\r\n            <div>\r\n                    {/* if willPower is false, then this h1 is printed */}\r\n                    <h1>Tasks for you !</h1>\r\n                    <img className=\"img img-thumbnail img-deco\" src={tasksPhoto}></img>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Tasks;","import _ from 'lodash';\r\n\r\nexport function paginate(items, pageNumber, pageSize){\r\n    const startIndex = (pageNumber - 1) * pageSize;\r\n    return _(items).slice(startIndex).take(pageSize).value();\r\n}","import React, { Component } from 'react';\r\n\r\nclass Button extends Component {\r\n    render() {\r\n        // pick willPower from app.js\r\n        const {willPower} = this.props;\r\n        return ( \r\n            // btn class = success when not click and in danger if user want to finish\r\n            <button onClick={this.props.onClick} className={(willPower)?\"btn btn-danger\":\"btn btn-success\"}\r\n            >\r\n            {/* label is Get It when user not click and Finish after user click */}\r\n            { willPower ? \"Finish\" : \"Get it\"}\r\n            </button>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Button;","import './App.css';\r\nimport React, {Component} from 'react';\r\nimport Clock from './Components/Clock';\r\nimport Tasks from './Components/Tasks';\r\nimport Button from './Components/Button';\r\nimport axios from 'axios';\r\n\r\nexport const TasksContext = React.createContext();\r\nclass App extends Component {\r\n  state = {\r\n    // your tasks\r\n    tasks: [],\r\n    // willPower: you will do it ?, default is false\r\n    willPower: false,\r\n  };\r\n  async componentDidMount(){\r\n    // api tasks is the task received from json\r\n    const apiTasks = await axios.get(\"https://jsonplaceholder.typicode.com/todos\");\r\n    this.setState({tasks: apiTasks.data});\r\n  }\r\n  // when click, set willPower != willPower \r\n  handleClick(){\r\n    this.setState({willPower: !this.state.willPower});\r\n  }\r\n  // update task\r\n  handleUpdate = async (task) => {\r\n    const tasks = [...this.state.tasks];\r\n    const index = tasks.indexOf(task);\r\n    tasks[index].completed = !tasks[index].completed;\r\n    this.setState({tasks});\r\n    // update server\r\n    await axios.put(\"https://jsonplaceholder.typicode.com/todos\" + \"/\" + task.id,task);\r\n  }\r\n  // delete task\r\n  handleDelete = async (task) => {\r\n    const tasks = this.state.tasks.filter(stateTask => stateTask.id !== task.id);\r\n    this.setState({tasks});\r\n    await axios.delete(\"https://jsonplaceholder.typicode.com/todos\" + \"/\" + task.id);\r\n  }\r\n  render () {\r\n    // pick tasks and willPower from state\r\n    const {tasks,willPower} = this.state;\r\n    \r\n    return (\r\n    <TasksContext.Provider value={{tasks: this.state.tasks, onUpdate: this.handleUpdate, onDelete: this.handleDelete}}>\r\n    <div className=\"container mt-5\">\r\n        <Clock />\r\n        <div className=\"row \">\r\n          <div className=\"col-md-6\">\r\n            <Tasks tasks = {tasks} willPower={willPower}/>\r\n          </div>\r\n          {/* mt2 for responsive in small devices */}\r\n          <div className=\"col-md-6 mt-2\">\r\n             <Button willPower={willPower} onClick={() => this.handleClick()}/>\r\n          </div>\r\n        </div>\r\n    </div>\r\n    </TasksContext.Provider>\r\n    \r\n  );\r\n  }\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './App';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}